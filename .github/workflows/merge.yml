name: Check before merge

on:
  # tests must run for a PR to be valid and pass merge queue muster
  # on main, we want to know that all commits are passing at a glance, any deviation should help bisecting errors
  # the merge run checks should show on master and enable this clear test/passing history
  merge_group:
    branches: [main]
  pull_request:
    branches: ["*"]

env:
  CARGO_INCREMENTAL: 0 # bookkeeping for incremental builds has overhead, not useful in CI.

jobs:
  cargo-udeps:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly  # Needs nightly to distinguish between deps of different versions
        with:
          # we need rustfmt here while we have a build step
          components: rustfmt
      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked
      - name: Run cargo-udeps
        run: cargo +nightly udeps --all-targets

  lint:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@0d749a1a91d4770e983a7b8f83d4a3f0e7e0874e

  checks:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: various checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4


      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - shell: bash
        run: cargo clippy --all-targets --all-features -- -Dwarnings
      
      - name: Check documentation
        # Deny certain `rustdoc` lints that are unwanted.
        # See https://doc.rust-lang.org/rustdoc/lints.html for lints that are 'warning' by default.
        run: RUSTDOCFLAGS="--deny=warnings" cargo doc --no-deps
      
      - name: Check local-discovery is not a default feature
        shell: bash
        run: if [[ ! $(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].features.default[]? | select(. == "local-discovery")') ]]; then echo "local-discovery is not a default feature in any package."; else echo "local-discovery is a default feature in at least one package." && exit 1; fi

      - name: Check the whole workspace can build
        run: cargo build --all-targets --all-features

  unit:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')" 
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2
      
      - name: Run CLI tests
        timeout-minutes: 25
        run: cargo test --release --package sn_cli

      - name: Run testnet tests
        timeout-minutes: 25
        run: cargo test --release --package sn_testnet

      - name: Run client tests
        timeout-minutes: 25
        run: cargo test --release --package sn_client

      - name: Run network tests
        timeout-minutes: 25
        run: cargo test --release --package sn_networking

      - name: Run protocol tests
        timeout-minutes: 25
        run: cargo test --release --package sn_protocol

      - name: Run transfers tests
        timeout-minutes: 25
        run: cargo test --release --package sn_transfers

      - name: Run register tests
        timeout-minutes: 25
        run: cargo test --release --package sn_registers
        env:
          # this will speed up PR merge flows, while giving us a modicum
          # of proptesting
          # we do many more runs on the nightly run
          PROPTEST_CASES: 50 

  e2e:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            safe_path: /home/runner/.local/share/safe
          - os: windows-latest
            safe_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe
          - os: macos-latest
            safe_path: /Users/runner/Library/Application Support/safe
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --bin safenode --bin safe --bin faucet
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: start
          interval: 2000
          node-path: target/release/safenode
          faucet-path: target/release/faucet
          platform: ${{ matrix.os }}
          build: true

      - name: Check SAFE_PEERS was set
        shell: bash
        run: |
          if [[ -z "$SAFE_PEERS" ]]; then
            echo "The SAFE_PEERS variable has not been set"
            exit 1
          else
            echo "SAFE_PEERS has been set to $SAFE_PEERS"
          fi

      - name: Create and fund a wallet to pay for files storage
        run: |
          cargo run --bin faucet --release -- --log-output-dest=data-dir send 1000000 $(cargo run --bin safe --release -- --log-output-dest=data-dir wallet address | tail -n 1) | tail -n 1 > transfer_hex
          cargo run --bin safe --release -- --log-output-dest=data-dir wallet receive --file transfer_hex
        env:
          SN_LOG: "all"
        timeout-minutes: 5

      - name: Start a client to upload files
        run: cargo run --bin safe --release -- --log-output-dest=data-dir files upload "./resources" -r 0
        env:
          SN_LOG: "all"
        timeout-minutes: 15

      - name: Start a client to download files
        run: cargo run --bin safe --release -- --log-output-dest=data-dir files download
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to create a register writable by the owner only
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register create -n baobao
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Start a client to get a register writable by the owner only
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register get -n baobao
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to edit a register writable by the owner only
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register edit -n baobao wood
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      ## Next two steps are same with a slight difference in the way they write to the output file (GITHUB_OUTPUT vs ENV:GITHUB_OUTPUT)

      # runs on linux/mac
      - name: Start a client to create a register writable by anyone
        id: register-address
        if: matrix.os != 'windows-latest' 
        run: echo "$(cargo run --bin safe --release -- --log-output-dest=data-dir register create -n trycatch -p | rg REGISTER_ADDRESS )" >> $GITHUB_OUTPUT
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      # runs on windows
      - name: Start a client to create a register writable by anyone
        id: register-address-windows
        if: matrix.os == 'windows-latest' 
        run: echo "$(cargo run --bin safe --release -- --log-output-dest=data-dir register create -n trycatch -p | rg REGISTER_ADDRESS )" >> $ENV:GITHUB_OUTPUT
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Start a client to get a register writable by anyone (current client is the owner)
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register get -n trycatch
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to edit a register writable by anyone (current client is the owner)
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register edit -n trycatch wood
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Delete client subdir to generate new client
        shell: bash
        run: rm -rf ${{ matrix.safe_path }}/client


      ## Next four steps are same with a slight difference in the which output step they read from

      # runs on linux/mac
      - name: Start a client to get a register writable by anyone (new client is not the owner)
        if: matrix.os != 'windows-latest' 
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register get ${{ steps.register-address.outputs.REGISTER_ADDRESS }}
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to edit a register writable by anyone (new client is not the owner)
        if: matrix.os != 'windows-latest'
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register edit ${{ steps.register-address.outputs.REGISTER_ADDRESS }} water
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      # runs on Windows
      - name: Start a client to get a register writable by anyone (new client is not the owner)
        if: matrix.os == 'windows-latest' 
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register get ${{ steps.register-address-windows.outputs.REGISTER_ADDRESS }}
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to edit a register writable by anyone (new client is not the owner)
        if: matrix.os == 'windows-latest'
        run: cargo run --bin safe --release -- --log-output-dest=data-dir register edit ${{ steps.register-address-windows.outputs.REGISTER_ADDRESS }} water
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: safe_test_logs_e2e
          platform: ${{ matrix.os }}
          build: true

  gossipsub:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')" 
    name: Gossipsub E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --bin safenode --bin faucet
        timeout-minutes: 30

      - name: Build gossipsub testing executable
        run: cargo test --release -p sn_node --features=local-discovery --test msgs_over_gossipsub --no-run
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: start
          interval: 2000
          node-path: target/release/safenode
          faucet-path: target/release/faucet
          platform: ${{ matrix.os }}
          build: true

      - name: Gossipsub - nodes to subscribe to topics, and publish messages 
        run: cargo test --release -p sn_node --features local-discovery --test msgs_over_gossipsub -- --nocapture
        timeout-minutes: 20

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: safe_test_logs_gossipsub_e2e
          platform: ${{ matrix.os }}
          build: true

  spend_test:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')" 
    name: spend tests against network
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --features=local-discovery --bin safenode --bin faucet
        timeout-minutes: 30

      - name: Build testing executable
        run: cargo test --release -p sn_node --features=local-discovery --test sequential_transfers --test storage_payments --test nodes_rewards --no-run
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: start
          interval: 2000
          node-path: target/release/safenode
          faucet-path: target/release/faucet
          platform: ${{ matrix.os }}
          build: true

      - name: Check SAFE_PEERS was set
        shell: bash
        run: |
          if [[ -z "$SAFE_PEERS" ]]; then
            echo "The SAFE_PEERS variable has not been set"
            exit 1
          else
            echo "SAFE_PEERS has been set to $SAFE_PEERS"
          fi
        
      # This should be first to avoid slow reward acceptance etc
      - name: execute the nodes rewards tests
        run: cargo test --release -p sn_node --features="local-discovery" --test nodes_rewards -- --nocapture --test-threads=1
        env:
          SN_LOG: "all"
        timeout-minutes: 25

      - name: execute the spend tests
        run: cargo test --release -p sn_node --features="local-discovery" --test sequential_transfers -- --nocapture --test-threads=1
        env:
          SN_LOG: "all"
        timeout-minutes: 25

      - name: execute the storage payment tests
        run: cargo test --release -p sn_node --features="local-discovery" --test storage_payments -- --nocapture --test-threads=1
        env:
          SN_LOG: "all"
        timeout-minutes: 25


      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: safe_test_logs_spend
          platform: ${{ matrix.os }}
          build: true

  churn:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Network churning tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            node_data_path: /home/runner/.local/share/safe/node
            safe_path: /home/runner/.local/share/safe
          - os: windows-latest
            node_data_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe\\node
            safe_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe
          - os: macos-latest
            node_data_path: /Users/runner/Library/Application Support/safe/node
            safe_path: /Users/runner/Library/Application Support/safe
    steps:
      - uses: actions/checkout@v4

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --features local-discovery --bin safenode --bin faucet
        timeout-minutes: 30

      - name: Build churn tests
        run: cargo test --release -p sn_node --features=local-discovery --test data_with_churn --no-run
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: start
          interval: 2000
          node-path: target/release/safenode
          faucet-path: target/release/faucet
          platform: ${{ matrix.os }}
          build: true

      - name: Check SAFE_PEERS was set
        shell: bash
        run: |
          if [[ -z "$SAFE_PEERS" ]]; then
            echo "The SAFE_PEERS variable has not been set"
            exit 1
          else
            echo "SAFE_PEERS has been set to $SAFE_PEERS"
          fi

      - name: Chunks data integrity during nodes churn
        run: cargo test --release -p sn_node --features="local-discovery" --test data_with_churn -- --nocapture 
        env:
          TEST_DURATION_MINS: 5
          TEST_TOTAL_CHURN_CYCLES: 15
          SN_LOG: "all"
        timeout-minutes: 30

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: safe_test_logs_churn
          platform: ${{ matrix.os }}
          build: true

      - name: Verify restart of nodes using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of restarts
        # TODO: make this use an env var, or relate to testnet size
        run : |
          restart_count=$(rg "Node is restarting in" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Restart $restart_count nodes"
          peer_removed=$(rg "PeerRemovedFromRoutingTable" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "PeerRemovedFromRoutingTable $peer_removed times"
          if [ $peer_removed -lt $restart_count ]; then
            echo "PeerRemovedFromRoutingTable times of: $peer_removed is less than the restart count of: $restart_count"
            exit 1
          fi
          node_count=$(ls "${{ matrix.node_data_path }}" | wc -l)
          echo "Node dir count is $node_count"
         
        # TODO: reenable this once the testnet dir creation is tidied up to avoid a large count here
        # if [ $restart_count -lt $node_count ]; then
        #   echo "Restart count of: $restart_count is less than the node count of: $node_count"
        #   exit 1
        # fi

      - name: Verify data replication using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of replication
        # TODO: make this use an env var, or relate to testnet size
        run : |
          fetching_attempt_count=$(rg "FetchingKeysForReplication" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Carried out $fetching_attempt_count fetching attempts"
          node_count=$(ls "${{ matrix.node_data_path }}" | wc -l)
          if [ $fetching_attempt_count -lt $node_count ]; then
            echo "Replication fetching attempts of: $fetching_attempt_count is less than the node count of: $node_count"
            exit 1
          fi

      # Only error out after uploading the logs
      - name: Don't log raw data
        if: matrix.os != 'windows-latest' # causes error
        shell: bash
        timeout-minutes: 10
        run: |
          if ! rg '^' "${{ matrix.safe_path }}"/*/*/logs | awk 'length($0) > 15000 { print; exit 1 }'
          then
            echo "We are logging an extremely large data"
            exit 1
          fi

  verify_data_location_routing_table:
      if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
      name: Verify data location and Routing Table
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          include:
            - os: ubuntu-latest
              node_data_path: /home/runner/.local/share/safe/node
              safe_path: /home/runner/.local/share/safe
            - os: windows-latest
              node_data_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe\\node
              safe_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe
            - os: macos-latest
              node_data_path: /Users/runner/Library/Application Support/safe/node
              safe_path: /Users/runner/Library/Application Support/safe
      steps:
        - uses: actions/checkout@v4

        - uses: dtolnay/rust-toolchain@stable

        - uses: Swatinem/rust-cache@v2

        - name: Build binaries
          run: cargo build --release --features local-discovery --bin safenode --bin faucet
          timeout-minutes: 30

        - name: Build data location and routing table tests
          run: cargo test --release -p sn_node --features=local-discovery --test verify_data_location --test verify_routing_table --no-run  
          timeout-minutes: 30

        - name: Start a local network
          uses: maidsafe/sn-local-testnet-action@main
          with:
            action: start
            interval: 2000
            node-path: target/release/safenode
            faucet-path: target/release/faucet
            platform: ${{ matrix.os }}
            build: true

        - name: Check SAFE_PEERS was set
          shell: bash
          run: |
            if [[ -z "$SAFE_PEERS" ]]; then
              echo "The SAFE_PEERS variable has not been set"
              exit 1
            else
              echo "SAFE_PEERS has been set to $SAFE_PEERS"
            fi

        - name: Verify the routing tables of the nodes
          run: cargo test --release -p sn_node --features="local-discovery" --test verify_routing_table -- --nocapture 
          timeout-minutes: 5
      
        - name: Verify the location of the data on the network
          run: cargo test --release -p sn_node --features="local-discovery" --test verify_data_location -- --nocapture 
          env:
            CHURN_COUNT: 3
            SN_LOG: "all"
          timeout-minutes: 5

        - name: Verify the routing tables of the nodes
          run: cargo test --release -p sn_node --features="local-discovery" --test verify_routing_table -- --nocapture 
          timeout-minutes: 5

        - name: Stop the local network and upload logs
          if: always()
          uses: maidsafe/sn-local-testnet-action@main
          with:
            action: stop
            log_file_prefix: safe_test_logs_data_location
            platform: ${{ matrix.os }}
            build: true

        - name: Verify restart of nodes using rg
          shell: bash
          timeout-minutes: 1
          # get the counts, then the specific line, and then the digit count only
          # then check we have an expected level of restarts
          # TODO: make this use an env var, or relate to testnet size
          run : |
            restart_count=$(rg "Node is restarting in" "${{ matrix.node_data_path }}" -c --stats | \
              rg "(\d+) matches" | rg "\d+" -o)
            echo "Restart $restart_count nodes"
            peer_removed=$(rg "PeerRemovedFromRoutingTable" "${{ matrix.node_data_path }}" -c --stats | \
              rg "(\d+) matches" | rg "\d+" -o)
            echo "PeerRemovedFromRoutingTable $peer_removed times"
            if [ $peer_removed -lt $restart_count ]; then
              echo "PeerRemovedFromRoutingTable times of: $peer_removed is less than the restart count of: $restart_count"
              exit 1
            fi
            node_count=$(ls "${{ matrix.node_data_path }}" | wc -l)
            echo "Node dir count is $node_count"

        # Only error out after uploading the logs
        - name: Don't log raw data
          if: matrix.os != 'windows-latest' # causes error
          shell: bash
          timeout-minutes: 10
          run: |
            if ! rg '^' "${{ matrix.safe_path }}"/*/*/logs | awk 'length($0) > 15000 { print; exit 1 }'
            then
              echo "We are logging an extremely large data"
              exit 1
            fi

  replication_bench_with_heavy_upload:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Replication bench with heaby upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: install ripgrep
        shell: bash
        run: sudo apt-get install -y ripgrep

      - name: Download materials to create two 300MB test_files to be uploaded by client
        shell: bash
        run: |
          mkdir test_data_1
          cd test_data_1
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/Qi930/safe-qiWithListeners-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/Qi930/safenode-qiWithListeners-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/Qi930/safenode_rpc_client-qiWithListeners-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/QiSubdivisionBranch/faucet-qilesssubs-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/QiSubdivisionBranch/safe-qilesssubs-x86_64.tar.gz
          ls -l
          cd ..
          tar -cvzf test_data_1.tar.gz test_data_1
          mkdir test_data_2
          cd test_data_2
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/QiSubdivisionBranch/safenode-qilesssubs-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/QiSubdivisionBranch/safenode_rpc_client-qilesssubs-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/RemoveArtificalReplPush/faucet-DebugMem-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/RemoveArtificalReplPush/safe-DebugMem-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/RemoveArtificalReplPush/safenode-DebugMem-x86_64.tar.gz
          ls -l
          cd ..
          tar -cvzf test_data_2.tar.gz test_data_2
          ls -l

      - name: Build binaries
        run: cargo build --release --bin safenode --bin safe --bin faucet
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: start
          interval: 2000
          node-path: target/release/safenode
          faucet-path: target/release/faucet
          platform: ubuntu-latest
          build: true

      - name: Check SAFE_PEERS was set
        shell: bash
        run: |
          if [[ -z "$SAFE_PEERS" ]]; then
            echo "The SAFE_PEERS variable has not been set"
            exit 1
          else
            echo "SAFE_PEERS has been set to $SAFE_PEERS"
          fi

      - name: Create and fund a wallet to pay for files storage
        run: |
          cargo run --bin faucet --release -- --log-output-dest=data-dir send 100000000 $(cargo run --bin safe --release -- --log-output-dest=data-dir wallet address | tail -n 1) | tail -n 1 > transfer_hex
          cargo run --bin safe --release -- --log-output-dest=data-dir wallet receive --file transfer_hex
        env:
          SN_LOG: "all"
        timeout-minutes: 5

      - name: Start a client to upload first file
        run: cargo run --bin safe --release -- --log-output-dest=data-dir files upload "./test_data_1.tar.gz" -r 0
        env:
          SN_LOG: "all"
        timeout-minutes: 5

      - name: Wait for certain period
        run: sleep 300
        timeout-minutes: 6

      - name: Start a client to upload second file
        run: cargo run --bin safe --release -- --log-output-dest=data-dir files upload "./test_data_2.tar.gz" -r 0
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/sn-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: safe_test_logs_heavy_replicate_bench
          platform: ubuntu-latest
          build: true