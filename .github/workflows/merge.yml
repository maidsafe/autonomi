name: Check before merge

on:
  # tests must run for a PR to be valid and pass merge queue muster
  # on main, we want to know that all commits are passing at a glance, any deviation should help bisecting errors
  # the merge run checks should show on master and enable this clear test/passing history
  merge_group:
    branches: [main]
  pull_request:
    branches: ["*"]

env:
  CARGO_INCREMENTAL: 0 # bookkeeping for incremental builds has overhead, not useful in CI.
  NODE_DATA_PATH: /home/runner/.local/share/safe/node

jobs:
  cargo-udeps:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          #Needs nightly to distinguish between deps of different versions
          toolchain: nightly
          # we need rustfmt here while we have a build step
          components: rustfmt

      - name: Install cargo-udeps
        # TODO: (2023-07-03) This is a non-released version from udeps, which includes a bug fix:
        # https://github.com/est31/cargo-udeps/issues/180
        # Change this when this is released.
        run: cargo install --git=https://github.com/est31/cargo-udeps.git --rev=f7a4705 --locked
      - name: Run cargo-udeps
        run: cargo +nightly udeps --all-targets

  lint:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@f114310111fdbd07e99f47f9ca13d62b3ec98372

  checks:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: various checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          toolchain: stable
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      
      - name: Check formatting
        run: cargo fmt --all -- --check
      
      - shell: bash
        run: cargo clippy --all-targets --all-features -- -Dwarnings
      
      - name: Check documentation
        # Deny certain `rustdoc` lints that are unwanted.
        # See https://doc.rust-lang.org/rustdoc/lints.html for lints that are 'warning' by default.
        run: RUSTDOCFLAGS="--deny=warnings" cargo doc --no-deps
      
      - name: Check local-discovery is not a default feature
        shell: bash
        run: if [[ ! $(cargo metadata --no-deps --format-version 1 | jq -r '.packages[].features.default[]? | select(. == "local-discovery")') ]]; then echo "local-discovery is not a default feature in any package."; else echo "local-discovery is a default feature in at least one package." && exit 1; fi


      - name: Check the whole workspace can build
        run: cargo build --all-targets --all-features

  unit:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')" 
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: Build tests before running
        run: cargo test --no-run --release
        timeout-minutes: 30

      - name: Run network tests
        timeout-minutes: 25
        run: cargo test --release --package sn_networking

      - name: Run protocol tests
        timeout-minutes: 25
        run: cargo test --release --package sn_protocol

      - name: Run transfers tests
        timeout-minutes: 25
        run: cargo test --release --package sn_transfers

      - name: Run register tests
        timeout-minutes: 25
        run: cargo test --release --package sn_registers
        env:
          # this will speed up PR merge flows, while giving us a modicum
          # of proptesting
          # we do many more runs on the nightly run
          PROPTEST_CASES: 50 

  e2e:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')" 
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            node_data_path: /home/runner/.local/share/safe/node
          - os: windows-latest
            node_data_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe\\node
          - os: macos-latest
            node_data_path: /Users/runner/Library/Application Support/safe/node
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          toolchain: stable
      - uses: Swatinem/rust-cache@v2

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cargo build --release --bins
        timeout-minutes: 30

      - name: Start a local network
        run: cargo run --release --bin testnet --features verify-nodes -- --interval 2000 --node-path ./target/release/safenode
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Set SAFE_PEERS (unix)
        run: |
          safe_peers=$(rg "listening on \".+\"" "${{ matrix.node_data_path }}" -u | \
            rg '/ip4.*$' -m1 -o | rg '"' -r '')
          echo "SAFE_PEERS=$safe_peers" >> $GITHUB_ENV
        if: matrix.os != 'windows-latest'

      - name: Set SAFE_PEERS (windows)
        shell: pwsh
        run: |
          $safe_peers = rg 'listening on ".+"' "${{ matrix.node_data_path }}" -u | `
              rg '/ip4.*$' -m1 -o
          $env:SAFE_PEERS = $safe_peers.Trim('"')
          Add-Content -Path $env:GITHUB_ENV -Value "SAFE_PEERS=$env:SAFE_PEERS"
        if: matrix.os == 'windows-latest'

      - name: Check contact peer
        shell: bash
        run: echo "Peer is $SAFE_PEERS"

      - name: Start a client to upload files
        run: cargo run --bin safe --release -- files upload -- "./resources"
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to download files
        run: cargo run --bin safe --release -- files download
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to create a register
        run: cargo run --bin safe --release -- register create baobao
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to get a register
        run: cargo run --bin safe --release -- register get baobao
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a client to edit a register
        run: cargo run --bin safe --release -- register edit baobao wood
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Start a faucet client to claim genesis
        run: cargo run --bin faucet --release -- claim-genesis
        env:
          SN_LOG: "all"
        timeout-minutes: 2

      - name: Kill all nodes (unix)
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"
        if: failure() && matrix.os != 'windows-latest'

      - name: Kill all nodes (windows)
        shell: pwsh
        timeout-minutes: 1
        continue-on-error: true
        run: Get-Process safenode | Stop-Process -Force
        if: failure() && matrix.os == 'windows-latest'

      - name: Tar log files (unix)
        shell: bash
        continue-on-error: true
        run: |
          find "${{ matrix.node_data_path }}" -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure() && matrix.os == 'windows-latest'

      - name: Tar log files (windows)
        shell: pwsh
        continue-on-error: true
        run: |
          Get-ChildItem -Path "${{ matrix.node_data_path }}" -Filter "*.log*" -Recurse -File | `
            ForEach-Object {& 'tar' -czvf 'log_files.tar.gz' $_.FullName}
        if: failure() && matrix.os == 'windows-latest'

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: safe_test_logs_e2e_${{matrix.os}}
          path: log_files.tar.gz
        continue-on-error: true
        if: failure()

  spend_test:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')" 
    name: dbc spend tests against network
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            node_data_path: /home/runner/.local/share/safe/node
          - os: windows-latest
            node_data_path: C:\\Users\\runneradmin\\AppData\\Roaming\\safe\\node
          - os: macos-latest
            node_data_path: /Users/runner/Library/Application Support/safe/node

    steps:
      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cargo build --release --bins --features local-discovery
        timeout-minutes: 30

      - name: Build testing executable
        run: cargo test --release --features local-discovery multiple_sequential_transfers_succeed --no-run
        timeout-minutes: 30
        env:
          CARGO_TARGET_DIR: "./transfer-target"

      - name: Start a local network
        run: cargo run --release --bin testnet --features verify-nodes -- --interval 2000 --node-path ./target/release/safenode
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: execute the dbc spend test
        run: cargo test --release --features="local-discovery" multiple_sequential_transfers_succeed  -- --nocapture
        env:
          SN_LOG: "all"
          CARGO_TARGET_DIR: "./transfer-target"
        timeout-minutes: 10

      - name: execute the storage payment test
        run: cargo test --release --features="local-discovery" storage_payment_succeeds -- --nocapture
        env:
          SN_LOG: "all"
          CARGO_TARGET_DIR: "./transfer-target"
        timeout-minutes: 10

      - name: Kill all nodes (unix)
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"
        if: failure() && matrix.os != 'windows-latest'

      - name: Kill all nodes (windows)
        shell: pwsh
        timeout-minutes: 1
        continue-on-error: true
        run: Get-Process safenode | Stop-Process -Force
        if: failure() && matrix.os == 'windows-latest'

      - name: Tar log files (unix)
        shell: bash
        continue-on-error: true
        run: |
          find "${{ matrix.node_data_path }}" -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure() && matrix.os == 'windows-latest'

      - name: Tar log files (windows)
        shell: pwsh
        continue-on-error: true
        run: |
          Get-ChildItem -Path "${{ matrix.node_data_path }}" -Filter "*.log*" -Recurse -File | `
            ForEach-Object {& 'tar' -czvf 'log_files.tar.gz' $_.FullName}
        if: failure() && matrix.os == 'windows-latest'

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: safe_test_logs_e2e_${{matrix.os}}
          path: log_files.tar.gz
        continue-on-error: true
        if: failure()

  churn:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Network churning tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v3
      - uses: dtolnay/rust-toolchain@stable
        id: rust-toolchain
        with:
          toolchain: stable

      - uses: Swatinem/rust-cache@v2

      - name: install ripgrep ubuntu
        run: sudo apt-get install ripgrep
        if: matrix.os == 'ubuntu-latest'

      - name: install ripgrep mac
        run: brew install ripgrep
        if: matrix.os == 'macos-latest'

      - name: install ripgrep windows
        run: choco install ripgrep
        if: matrix.os == 'windows-latest'

      - name: Build sn bins
        run: cargo build --release --bins --features local-discovery
        timeout-minutes: 30

      - name: Build churn tests
        run: cargo test --release -p sn_node --features="local-discovery" --no-run
        timeout-minutes: 30
        # new output folder to avoid linker issues w/ windows
        env:
          CARGO_TARGET_DIR: "./churn-target"

      - name: Start a local network
        run: cargo run --release --bin testnet --features verify-nodes -- --interval 2000 --node-path ./target/release/safenode
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Chunks data integrity during nodes churn (during 10min)
        run: cargo test --release -p sn_node --features="local-discovery" --test data_with_churn -- --nocapture 
        env:
          # new output folder to avoid linker issues w/ windows
          CARGO_TARGET_DIR: "./churn-target"
          CHUNKS_ONLY: true
          TEST_DURATION_MINS: 10
          SN_LOG: "all"
        timeout-minutes: 30

      - name: Verify restart of nodes using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of restarts
        # TODO: make this use an env var, or relate to testnet size
        run : |
          restart_count=$(rg "Node is wiping data and restarting in" "$NODE_DATA_PATH" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Restart $restart_count nodes"
          detected_dead_peer=$(rg "Detected dead peer" "$NODE_DATA_PATH" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Detected dead peer $detected_dead_peer times"
          if [ $detected_dead_peer -lt $restart_count ]; then
            echo "Detected dead peer times of: $detected_dead_peer is less than the restart count of: $restart_count"
            exit 1
          fi
          node_count=$(ls ~/.safe/node/local-test-network | wc -l)
          if [ $restart_count -lt $node_count ]; then
            echo "Restart count of: $restart_count is less than the node count of: $node_count"
            exit 1
          fi

      - name: Verify data replication using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of replication
        # TODO: make this use an env var, or relate to testnet size
        run : |
          replication_count=$(rg "Chunk received for replication" $NODE_DATA_PATH -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Replicated $replication_count copies"
          node_count=$(ls ~/.safe/node/local-test-network | wc -l)
          if [ $replication_count -lt $node_count ]; then
            echo "Replication count of: $replication_count is less than the node count of: $node_count"
            exit 1
          fi

      - name: Kill all nodes (unix)
        shell: bash
        timeout-minutes: 1
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"
        if: failure() && matrix.os != 'windows-latest'

      - name: Kill all nodes (windows)
        shell: pwsh
        timeout-minutes: 1
        continue-on-error: true
        run: Get-Process safenode | Stop-Process -Force
        if: failure() && matrix.os == 'windows-latest'

      - name: Tar log files (unix)
        shell: bash
        continue-on-error: true
        run: |
          find "${{ matrix.node_data_path }}" -iname '*.log*' | tar -zcvf log_files.tar.gz --files-from -
        if: failure() && matrix.os == 'windows-latest'

      - name: Tar log files (windows)
        shell: pwsh
        continue-on-error: true
        run: |
          Get-ChildItem -Path "${{ matrix.node_data_path }}" -Filter "*.log*" -Recurse -File | `
            ForEach-Object {& 'tar' -czvf 'log_files.tar.gz' $_.FullName}
        if: failure() && matrix.os == 'windows-latest'

      - name: Upload Node Logs
        uses: actions/upload-artifact@main
        with:
          name: safe_test_logs_e2e_${{matrix.os}}
          path: log_files.tar.gz
        continue-on-error: true
        if: failure()
