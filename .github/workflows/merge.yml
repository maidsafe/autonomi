name: Check before merge

on:
  merge_group:
    branches: [ main ]
  pull_request:
    branches: [ "*" ]

env:
  CARGO_INCREMENTAL: 0 # bookkeeping for incremental builds has overhead, not useful in CI.

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v6
        with:
          python-version: '3.x'
      - name: Display Python version
        run: python --version

  cargo-udeps:
    name: Unused dependency check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@nightly # Needs nightly to distinguish between deps of different versions
        with:
          # we need rustfmt here while we have a build step
          components: rustfmt

      - name: Install cargo-udeps
        run: cargo install cargo-udeps --locked

      - name: Run cargo-udeps
        run: cargo +nightly udeps --all-targets
        # ignore the error cause by the latest nightly changes.
        # should be fixed by https://github.com/dalek-cryptography/curve25519-dalek/pull/619
        continue-on-error: true

  lint:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

  checks:
    name: various checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - shell: bash
        run: cargo clippy --all-targets --all-features -- -Dwarnings

      - name: Check documentation
        # Deny certain `rustdoc` lints that are unwanted with `RUSTDOCFLAGS`. See
        # https://doc.rust-lang.org/rustdoc/lints.html for lints that are 'warning' by default.
        #
        # We exclude autonomi-cli because it is not published and conflicts with the `autonomi` crate name,
        # resulting in an error when building docs.
        run: RUSTDOCFLAGS="--deny=warnings" cargo doc --no-deps --workspace --exclude=autonomi-cli

      - name: Clean out the target directory
        run: cargo clean

      # In a cargo workspace, feature unification can occur, allowing a crate to be built successfully even if it
      # doesn't explicitly specify a feature it uses, provided another crate in the workspace enables that feature.
      # To detect such cases, we must build each crate using `--package` flag, building all packages at once does not work.
      - name: Check the whole workspace can build
        shell: bash
        run: |
          for package in $(cargo metadata --no-deps --format-version=1 | jq -r '.packages[].name'); do
            cargo build -p "$package" --all-targets --all-features
          done
          echo "All packages built successfully. Cleaning up..."
          cargo clean

  unit:
    name: Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v5

      - name: Check we're on the right commit
        run: git log -1 --oneline

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Set ANT_LOG environment variable
        run: echo "ANT_LOG=all" >> $GITHUB_ENV

      - name: Run autonomi tests
        timeout-minutes: 25
        run: cargo test --release --package autonomi --lib

      - name: Run autonomi doc tests
        timeout-minutes: 25
        run: cargo test --release --package autonomi --doc

      - name: Run autonomi self_encryption backward_compatibility unit tests
        timeout-minutes: 25
        run: cargo test --release test_self_encryption_backward_compatibility

      - name: Run bootstrap tests
        timeout-minutes: 25
        run: cargo test --release --package ant-bootstrap

      # The `can_store_after_restart` can be executed with other package tests together and passing
      # on local machine. However keeps failing (when executed together) on CI machines.
      # This is most likely due to the setup and cocurrency issues of the tests.
      # As the `record_store` is used in a single thread style, get the test passing executed
      # and passing standalone is enough.
      - name: Run node tests (except can_store_after_restart)
        timeout-minutes: 25
        run: cargo test --release --package ant-node -- --skip can_store_after_restart --skip data_availability_during_churn --skip verify_data_location --skip verify_routing_table

      - name: Run can_store_after_restart separately
        timeout-minutes: 5
        run: cargo test --release --package ant-node can_store_after_restart

      # Same set of tests shall be executed with `encrypt-records` flag enabled.
      # With now changed to `always carry out encryption`, no need to re-run the same set again.
      # Re-enable the following block once default behaviour changed.
      #
      # - name: Run node tests (except can_store_after_restart)
      #   timeout-minutes: 25
      #   run: cargo test --release --package ant-node --features="open-metrics, encrypt-records" -- --skip can_store_after_restart --skip data_availability_during_churn --skip verify_data_location --skip verify_routing_table

      # - name: Run can_store_after_restart separately
      #   timeout-minutes: 5
      #   run: cargo test --release --package ant-node --features="open-metrics, encrypt-records" can_store_after_restart

      - name: Run launchpad tests
        timeout-minutes: 25
        run: cargo test --release --package node-launchpad

      - name: Run protocol tests
        timeout-minutes: 25
        run: cargo test --release --package ant-protocol

      - name: Run logging tests
        timeout-minutes: 25
        run: cargo test --release --package ant-logging

      - name: Upload logs
        if: always()
        uses: ./.github/actions/upload-logs
        with:
          log_file_prefix: ant_test_logs_unit

  e2e:
    name: E2E tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            ant_path: /home/runner/.local/share/autonomi
          - os: windows-latest
            ant_path: C:\\Users\\runneradmin\\AppData\\Roaming\\autonomi
          - os: macos-latest
            ant_path: /Users/runner/Library/Application\ Support/autonomi
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --bin antnode --bin ant --bin antctl
        timeout-minutes: 30

      - name: Install antctl on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $destination = "C:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\WindowsApps"
          Copy-Item "target\\release\\antctl.exe" -Destination $destination -Force
          Write-Host "antctl installed to $destination"

      - name: Start a local network
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: start
          enable-evm-testnet: true
          node-path: target/release/antnode
          build: true

      - name: Check if ANT_PEERS and EVM_NETWORK are set
        shell: bash
        run: |
          if [[ -z "$ANT_PEERS" ]]; then
            echo "The ANT_PEERS variable has not been set"
            exit 1
          elif [[ -z "$EVM_NETWORK" ]]; then
            echo "The EVM_NETWORK variable has not been set"
            exit 1
          else
            echo "ANT_PEERS has been set to $ANT_PEERS"
            echo "EVM_NETWORK has been set to $EVM_NETWORK"
          fi

      # only these unit tests require a network, the rest are run above in unit test section
      - name: Run autonomi --tests
        run: cargo test --package autonomi --tests -- --nocapture
        env:
          ANT_LOG: "v"
          # only set the target dir for windows to bypass the linker issue.
          # happens if we build the node manager via testnet action
          CARGO_TARGET_DIR: ${{ matrix.os == 'windows-latest' && './test-target' || '.' }}
        timeout-minutes: 40

      # FIXME: do this in a generic way for localtestnets
      - name: export default secret key
        if: matrix.os != 'windows-latest'
        run: echo "SECRET_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
        shell: bash
      - name: Set secret key for Windows
        if: matrix.os == 'windows-latest'
        run: echo "SECRET_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Get file cost
        run: ./target/release/ant --log-output-dest=data-dir --local file cost "./resources"
        env:
          ANT_LOG: "v"
        timeout-minutes: 15

      - name: File upload
        run: ./target/release/ant --log-output-dest=data-dir --local file upload "./resources" > ./upload_output 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 15

      - name: parse address (unix)
        if: matrix.os != 'windows-latest'
        run: |
          UPLOAD_ADDRESS=$(rg "At address: ([0-9a-f]*)" -o -r '$1' ./upload_output)
          echo "UPLOAD_ADDRESS=$UPLOAD_ADDRESS" >> $GITHUB_ENV
        shell: bash

      - name: parse address (win)
        if: matrix.os == 'windows-latest'
        run: |
          $UPLOAD_ADDRESS = rg "At address: ([0-9a-f]*)" -o -r '$1' ./upload_output
          echo "UPLOAD_ADDRESS=$UPLOAD_ADDRESS" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: File Download
        run: ./target/release/ant --log-output-dest=data-dir --local file download ${{ env.UPLOAD_ADDRESS }} ./downloaded_resources/downloaded_file2
        env:
          ANT_LOG: "v"
        timeout-minutes: 5

      - name: Generate register signing key
        run: ./target/release/ant --log-output-dest=data-dir --local register generate-key

      - name: Create register (writeable by owner)
        run: ./target/release/ant --log-output-dest=data-dir --local register create baobao 123 > ./register_create_output 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 10

      - name: parse register address (unix)
        if: matrix.os != 'windows-latest'
        run: |
          REGISTER_ADDRESS=$(rg "Register created at address: ([0-9a-f]*)" -o -r '$1' ./register_create_output)
          echo "REGISTER_ADDRESS=$REGISTER_ADDRESS" >> $GITHUB_ENV
        shell: bash

      - name: parse register address (win)
        if: matrix.os == 'windows-latest'
        run: |
          $REGISTER_ADDRESS = rg "Register created at address: ([0-9a-f]*)" -o -r '$1' ./register_create_output
          echo "REGISTER_ADDRESS=$REGISTER_ADDRESS" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Get register
        run: ./target/release/ant --log-output-dest=data-dir --local register get ${{ env.REGISTER_ADDRESS }}
        env:
          ANT_LOG: "v"
        timeout-minutes: 5

      - name: Edit register
        run: ./target/release/ant --log-output-dest=data-dir --local register edit ${{ env.REGISTER_ADDRESS }} 456
        env:
          ANT_LOG: "v"
        timeout-minutes: 10

      - name: Get register (after edit)
        run: ./target/release/ant --log-output-dest=data-dir --local register get ${{ env.REGISTER_ADDRESS }}
        env:
          ANT_LOG: "v"
        timeout-minutes: 5

      - name: Create Register
        run: ./target/release/ant --log-output-dest=data-dir --local register create bao 111 > ./register2_create_output 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 5

      - name: parse register address (unix)
        if: matrix.os != 'windows-latest'
        run: |
          REGISTER2_ADDRESS=$(rg "Register created at address: ([0-9a-f]*)" -o -r '$1' ./register2_create_output)
          echo "REGISTER2_ADDRESS=$REGISTER2_ADDRESS" >> $GITHUB_ENV
        shell: bash

      - name: parse register address (win)
        if: matrix.os == 'windows-latest'
        run: |
          $REGISTER2_ADDRESS = rg "Register created at address: ([0-9a-f]*)" -o -r '$1' ./register2_create_output
          echo "REGISTER2_ADDRESS=$REGISTER2_ADDRESS" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        shell: pwsh

      - name: Get Register (current key is the owner)
        run: ./target/release/ant --log-output-dest=data-dir --local register get ${{ env.REGISTER2_ADDRESS }}
        env:
          ANT_LOG: "v"
        timeout-minutes: 5

      - name: Edit Register (current key is the owner)
        run: ./target/release/ant --log-output-dest=data-dir --local register edit ${{ env.REGISTER2_ADDRESS }} 222
        env:
          ANT_LOG: "v"
        timeout-minutes: 10

      - name: Delete current register signing key
        shell: bash
        run: rm -rf ${{ matrix.ant_path }}/client

      - name: Generate new register signing key
        run: ./target/release/ant --log-output-dest data-dir register generate-key

      - name: Get Register (new signing key is not the owner)
        run: ./target/release/ant --log-output-dest data-dir --local register get ${{ env.REGISTER2_ADDRESS }}
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: Get Register (new signing key is not the owner)
        run: ./target/release/ant --log-output-dest data-dir --local register get ${{ env.REGISTER2_ADDRESS }}
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: create local user file
        run: echo random > random.txt
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: file upload
        run: ./target/release/ant --log-output-dest data-dir --local file upload random.txt
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: create a local register
        run: ./target/release/ant --log-output-dest data-dir --local register create sample_new_register 1234
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: Estimate cost to create a vault
        run: ./target/release/ant --log-output-dest data-dir --local vault cost
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: create a vault with existing user data as above
        run: ./target/release/ant --log-output-dest data-dir --local vault create
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: add more files - linux/macos
        if: matrix.os != 'windows-latest'
        run: |
          set -e
          for i in {1..50}; do
            dd if=/dev/urandom of=random_file_$i.bin bs=1M count=1 status=none
            ./target/release/ant --log-output-dest data-dir --local file upload random_file_$i.bin --public
            ./target/release/ant --log-output-dest data-dir --local file upload random_file_$i.bin
            ./target/release/ant --log-output-dest data-dir --local register create $i random_file_$i.bin
          done
        env:
          ANT_LOG: "v"
        timeout-minutes: 25

      - name: add more files - windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          for ($i = 1; $i -le 50; $i++) {
              $fileName = "random_file_$i.bin"
              $byteArray = [byte[]]@(0xFF) * (1MB)  # Create a 1 MB array filled with 0xFF
              [System.IO.File]::WriteAllBytes($fileName, $byteArray)

              # Run autonomi commands
              ./target/release/ant --log-output-dest data-dir --local file upload "random_file_$i.bin" --public
              ./target/release/ant --log-output-dest data-dir --local file upload "random_file_$i.bin"
              ./target/release/ant --log-output-dest data-dir --local register create $i "random_file_$i.bin"
          }
        env:
          ANT_LOG: "v"
        timeout-minutes: 35

      - name: sync the vault
        run: ./target/release/ant --log-output-dest data-dir --local vault sync
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: load the vault from network
        run: ./target/release/ant --log-output-dest data-dir --local vault load
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: vault sync validation
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          set -e
          NUM_OF_PUBLIC_FILES=""
          NUM_OF_PRIVATE_FILES=""
          NUM_OF_PUBLIC_FILES_IN_VAULT=""
          NUM_OF_PRIVATE_FILES_IN_VAULT=""

          ./target/release/ant --log-output-dest data-dir --local file list 2>&1 > file_list.txt

          # Extract and sum public file archive(s) and public file(s) counts
          PUBLIC_ARCHIVES=`cat file_list.txt | grep "public file archive" | grep -o '[0-9]\+' | head -1`
          PUBLIC_FILES=`cat file_list.txt | grep "public file(s)" | grep -o '[0-9]\+' | head -1`
          NUM_OF_PUBLIC_FILES=$((${PUBLIC_ARCHIVES:-0} + ${PUBLIC_FILES:-0}))
          
          # Extract and sum private file archive(s) and private file(s) counts  
          PRIVATE_ARCHIVES=`cat file_list.txt | grep "private file archive" | grep -o '[0-9]\+' | head -1`
          PRIVATE_FILES=`cat file_list.txt | grep "private file(s)" | grep -o '[0-9]\+' | head -1`
          NUM_OF_PRIVATE_FILES=$((${PRIVATE_ARCHIVES:-0} + ${PRIVATE_FILES:-0}))
          
          ./target/release/ant --log-output-dest data-dir --local vault load 2>&1 > vault_data.txt

          # Extract and sum vault public file archive(s) and public file(s) counts
          VAULT_PUBLIC_ARCHIVES=`cat vault_data.txt | grep "public file archive" | grep -o '[0-9]\+' | head -1`
          VAULT_PUBLIC_FILES=`cat vault_data.txt | grep "public file(s)" | grep -o '[0-9]\+' | head -1`
          NUM_OF_PUBLIC_FILES_IN_VAULT=$((${VAULT_PUBLIC_ARCHIVES:-0} + ${VAULT_PUBLIC_FILES:-0}))
          
          # Extract and sum vault private file archive(s) and private file(s) counts
          VAULT_PRIVATE_ARCHIVES=`cat vault_data.txt | grep "private file archive" | grep -o '[0-9]\+' | head -1`
          VAULT_PRIVATE_FILES=`cat vault_data.txt | grep "private file(s)" | grep -o '[0-9]\+' | head -1`
          NUM_OF_PRIVATE_FILES_IN_VAULT=$((${VAULT_PRIVATE_ARCHIVES:-0} + ${VAULT_PRIVATE_FILES:-0}))

          echo "Total Num of local public files is $NUM_OF_PUBLIC_FILES and in vault is $NUM_OF_PUBLIC_FILES_IN_VAULT"
          echo "Total Num of local private files is $NUM_OF_PRIVATE_FILES and in vault is $NUM_OF_PRIVATE_FILES_IN_VAULT"

          rm -rf file_list.txt vault_data.txt

          python3 -c 'import sys; assert sys.argv[1] == sys.argv[2], f"Error: local data and vault in network dont match, Local public Files: {sys.argv[1]} and vault public files: {sys.argv[2]} are Not Equal"' $NUM_OF_PUBLIC_FILES $NUM_OF_PUBLIC_FILES_IN_VAULT
          python3 -c 'import sys; assert sys.argv[1] == sys.argv[2], f"Error: local data and vault in network dont match, Local private Files: {sys.argv[1]} and vault private files: {sys.argv[2]} are Not Equal"' $NUM_OF_PRIVATE_FILES $NUM_OF_PRIVATE_FILES_IN_VAULT
          echo "vault synced successfully!"
        env:
          ANT_LOG: "v"
        timeout-minutes: 15

      - name: Set up variables - vault sync - windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $ErrorActionPreference = "Stop"
          ./target/release/ant --log-output-dest data-dir --local file list > file_list.txt 2>&1
          ./target/release/ant --log-output-dest data-dir --local vault load > vault_data.txt 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 15

      - name: Vault sync validation
        if: matrix.os == 'windows-latest'
        shell: python
        run: |
          import re
          def find_number_before_phrase(file_name, search_phrase):
              """
              Reads a file and finds the number immediately preceding a specified phrase in a line.

              :param file_name: Name of the file to read.
              :param search_phrase: Phrase to search for in the file.
              :return: The number before the phrase as an integer, or 0 if not found.
              """
              try:
                  with open(file_name, 'r') as file:
                      for line in file:
                          if search_phrase in line:
                              match = re.search(r'(\d+)\s+' + re.escape(search_phrase), line)
                              if match:
                                  return int(match.group(1))  # Convert to integer
                  return 0  # Return 0 if no match is found
              except FileNotFoundError:
                  print(f"Error: File '{file_name}' not found.")
                  return 0

          # Extract and sum public file archive(s) and public file(s) counts
          public_archives = find_number_before_phrase("file_list.txt", "public file archive")
          public_files = find_number_before_phrase("file_list.txt", "public file(s)")  
          NUM_OF_PUBLIC_FILES = public_archives + public_files
          print("NUM_OF_PUBLIC_FILES:", NUM_OF_PUBLIC_FILES, f"(archives: {public_archives}, files: {public_files})")
          
          # Extract and sum private file archive(s) and private file(s) counts
          private_archives = find_number_before_phrase("file_list.txt", "private file archive")
          private_files = find_number_before_phrase("file_list.txt", "private file(s)")
          NUM_OF_PRIVATE_FILES = private_archives + private_files
          print("NUM_OF_PRIVATE_FILES:", NUM_OF_PRIVATE_FILES, f"(archives: {private_archives}, files: {private_files})")
          
          # Extract and sum vault public file archive(s) and public file(s) counts  
          vault_public_archives = find_number_before_phrase("vault_data.txt", "public file archive")
          vault_public_files = find_number_before_phrase("vault_data.txt", "public file(s)")
          NUM_OF_PUBLIC_FILES_IN_VAULT = vault_public_archives + vault_public_files
          print("NUM_OF_PUBLIC_FILES_IN_VAULT:", NUM_OF_PUBLIC_FILES_IN_VAULT, f"(archives: {vault_public_archives}, files: {vault_public_files})")
          
          # Extract and sum vault private file archive(s) and private file(s) counts
          vault_private_archives = find_number_before_phrase("vault_data.txt", "private file archive")
          vault_private_files = find_number_before_phrase("vault_data.txt", "private file(s)")
          NUM_OF_PRIVATE_FILES_IN_VAULT = vault_private_archives + vault_private_files
          print("NUM_OF_PRIVATE_FILES_IN_VAULT:", NUM_OF_PRIVATE_FILES_IN_VAULT, f"(archives: {vault_private_archives}, files: {vault_private_files})")

          # Assertions
          assert NUM_OF_PUBLIC_FILES == NUM_OF_PUBLIC_FILES_IN_VAULT, f"Error: local data and vault in network dont match, Local public Files: {NUM_OF_PUBLIC_FILES} and vault public files: {NUM_OF_PUBLIC_FILES_IN_VAULT} are Not Equal"
          assert NUM_OF_PRIVATE_FILES == NUM_OF_PRIVATE_FILES_IN_VAULT, f"Error: local data and vault in network dont match, Local private Files: {NUM_OF_PRIVATE_FILES} and vault private files: {NUM_OF_PRIVATE_FILES_IN_VAULT} are Not Equal"
          print("Vault synced successfully!")
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: load an existing vault from the network
        run: ./target/release/ant --log-output-dest data-dir --local vault load
        env:
          ANT_LOG: "v"
        timeout-minutes: 2

      - name: Time profiling for Different files
        if: matrix.os != 'windows-latest'
        run: |
          set -e
          # 1 MB
          python3 -c "with open('random_1MB.bin', 'wb') as f: f.write(bytearray([0xff] * 1 * 1024 * 1024))"
          # 10 MB
          python3 -c "with open('random_10MB.bin', 'wb') as f: f.write(bytearray([0xff] * 10 * 1024 * 1024))"
          # 100 MB
          python3 -c "with open('random_100MB.bin', 'wb') as f: f.write(bytearray([0xff] * 100 * 1024 * 1024))"
          # 1 GB
          python3 -c "with open('random_1GB.bin', 'wb') as f: f.write(bytearray([0xff] * 1000 * 1024 * 1024))"

          ./target/release/ant --log-output-dest=data-dir --local file list
          time ./target/release/ant --log-output-dest=data-dir --local file upload random_1MB.bin
          time ./target/release/ant --log-output-dest=data-dir --local file upload random_10MB.bin
          time ./target/release/ant --log-output-dest=data-dir --local file upload random_100MB.bin
          time ./target/release/ant --log-output-dest=data-dir --local file upload random_1GB.bin
          ./target/release/ant --log-output-dest=data-dir --local vault sync
          rm -rf random*.bin
          rm -rf ${{ matrix.ant_path }}/autonomi
        env:
          ANT_LOG: "v"
        timeout-minutes: 15

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: ant_test_logs_e2e
          build: true

  churn:
    name: Network churning tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            node_data_path: /home/runner/.local/share/autonomi/node
            ant_path: /home/runner/.local/share/autonomi
          - os: windows-latest
            node_data_path: C:\\Users\\runneradmin\\AppData\\Roaming\\autonomi\\node
            ant_path: C:\\Users\\runneradmin\\AppData\\Roaming\\autonomi
          - os: macos-latest
            node_data_path: /Users/runner/Library/Application Support/autonomi/node
            ant_path: /Users/runner/Library/Application Support/autonomi
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --bin antnode --bin antctl
        timeout-minutes: 30

      - name: Install antctl on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $destination = "C:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\WindowsApps"
          if (Test-Path "target\\release\\antctl.exe") {
            Copy-Item "target\\release\\antctl.exe" -Destination $destination -Force
            Write-Host "antctl installed to $destination from target\\release"
          } elseif (Test-Path ".\\test-target\\release\\antctl.exe") {
            Copy-Item ".\\test-target\\release\\antctl.exe" -Destination $destination -Force
            Write-Host "antctl installed to $destination from test-target\\release"
          } else {
            Write-Host "ERROR: antctl.exe not found in either target\\release or test-target\\release"
            exit 1
          }

      - name: Build churn tests
        run: cargo test --release -p ant-node --test data_with_churn --no-run
        env:
          # only set the target dir for windows to bypass the linker issue.
          # happens if we build the node manager via testnet action
          CARGO_TARGET_DIR: ${{ matrix.os == 'windows-latest' && './test-target' || '.' }}
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: start
          enable-evm-testnet: true
          node-path: target/release/antnode
          build: true

      - name: Check if ANT_PEERS and EVM_NETWORK are set
        shell: bash
        run: |
          if [[ -z "$ANT_PEERS" ]]; then
            echo "The ANT_PEERS variable has not been set"
            exit 1
          elif [[ -z "$EVM_NETWORK" ]]; then
            echo "The EVM_NETWORK variable has not been set"
            exit 1
          else
            echo "ANT_PEERS has been set to $ANT_PEERS"
            echo "EVM_NETWORK has been set to $EVM_NETWORK"
          fi

      - name: Chunks data integrity during nodes churn
        run: cargo test --release -p ant-node --test data_with_churn -- --nocapture
        env:
          TEST_DURATION_MINS: 5
          TEST_TOTAL_CHURN_CYCLES: 15
          ANT_LOG: "all"
          CARGO_TARGET_DIR: ${{ matrix.os == 'windows-latest' && './test-target' || '.' }}
        timeout-minutes: 30

      # Sleep for a while to allow restarted nodes can be detected by others
      - name: Sleep a while
        run: sleep 300

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: ant_test_logs_churn
          build: true

      - name: Get total node count
        shell: bash
        timeout-minutes: 1
        run: |
          node_count=$(ls "${{ matrix.node_data_path }}" | wc -l)
          echo "Node dir count is $node_count"

      - name: Get restart of nodes using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of restarts
        # TODO: make this use an env var, or relate to testnet size
        run: |
          restart_count=$(rg "Node is restarting in" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Restarted $restart_count nodes"

      # `PeerRemovedFromRoutingTable` now only happens when a peer reported as `BadNode`.
      # Otherwise kad will remove a `dropped out node` directly from RT.
      # So, the detection of the removal explicity will now have much less chance,
      # due to the removal of connection_issue tracking.
      - name: Get peers removed from nodes using rg
        shell: bash
        timeout-minutes: 1
        run: |
          peer_removed=$(rg "PeerRemovedFromRoutingTable" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o) || { echo "Failed to extract peer removal count"; exit 0; }
          if [ -z "$peer_removed" ]; then
            echo "No peer removal count found"
            exit 1
          fi
          echo "PeerRemovedFromRoutingTable $peer_removed times"

        # TODO: reenable this once the testnet dir creation is tidied up to avoid a large count here
        # if [ $restart_count -lt $node_count ]; then
        #   echo "Restart count of: $restart_count is less than the node count of: $node_count"
        #   exit 1
        # fi

      - name: Verify data replication using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of replication
        # TODO: make this use an env var, or relate to testnet size
        run: |
          fetching_attempt_count=$(rg "FetchingKeysForReplication" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Carried out $fetching_attempt_count fetching attempts"
          node_count=$(ls "${{ matrix.node_data_path }}" | wc -l)
          if [ $fetching_attempt_count -lt $node_count ]; then
            echo "Replication fetching attempts of: $fetching_attempt_count is less than the node count of: $node_count"
            exit 1
          fi

      # Only error out after uploading the logs
      - name: Don't log raw data
        if: matrix.os != 'windows-latest' # causes error
        shell: bash
        timeout-minutes: 10
        run: |
          if ! rg '^' "${{ matrix.ant_path }}"/*/*/logs | awk 'length($0) > 15000 { print; exit 1 }'
          then
            echo "We are logging an extremely large data"
            exit 1
          fi

  verify_data_location_routing_table:
    name: Verify data location and Routing Table
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            node_data_path: /home/runner/.local/share/autonomi/node
            ant_path: /home/runner/.local/share/autonomi
          - os: windows-latest
            node_data_path: C:\\Users\\runneradmin\\AppData\\Roaming\\autonomi\\node
            ant_path: C:\\Users\\runneradmin\\AppData\\Roaming\\autonomi
          - os: macos-latest
            node_data_path: /Users/runner/Library/Application Support/autonomi/node
            ant_path: /Users/runner/Library/Application Support/autonomi
    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable

      - uses: Swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --bin antnode
        timeout-minutes: 30

      - name: Build data location and routing table tests
        run: cargo test --release -p ant-node --test verify_data_location --test verify_routing_table --no-run
        env:
          # only set the target dir for windows to bypass the linker issue.
          # happens if we build the node manager via testnet action
          CARGO_TARGET_DIR: ${{ matrix.os == 'windows-latest' && './test-target' || '.' }}
        timeout-minutes: 30

      - name: Start a local network
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: start
          enable-evm-testnet: true
          node-path: target/release/antnode
          build: true

      - name: Check if ANT_PEERS and EVM_NETWORK are set
        shell: bash
        run: |
          if [[ -z "$ANT_PEERS" ]]; then
              echo "The ANT_PEERS variable has not been set"
              exit 1
          elif [[ -z "$EVM_NETWORK" ]]; then
              echo "The EVM_NETWORK variable has not been set"
              exit 1
          else
              echo "ANT_PEERS has been set to $ANT_PEERS"
              echo "EVM_NETWORK has been set to $EVM_NETWORK"
          fi

      - name: Wait for nodes to discover each other
        run: sleep 30
        timeout-minutes: 1

      - name: Verify the routing tables of the nodes
        run: cargo test --release -p ant-node --test verify_routing_table -- --nocapture
        env:
          CARGO_TARGET_DIR: ${{ matrix.os == 'windows-latest' && './test-target' || '.' }}
        timeout-minutes: 5

      - name: Verify the location of the data on the network
        run: cargo test --release -p ant-node --test verify_data_location -- --nocapture
        env:
          CHURN_COUNT: 6
          ANT_LOG: "all"
          CARGO_TARGET_DIR: ${{ matrix.os == 'windows-latest' && './test-target' || '.' }}
        timeout-minutes: 25

      # Sleep for a while to allow restarted nodes can be detected by others
      - name: Sleep a while
        run: sleep 300

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: ant_test_logs_data_location
          build: true

      - name: Verify restart of nodes using rg
        shell: bash
        timeout-minutes: 1
        # get the counts, then the specific line, and then the digit count only
        # then check we have an expected level of restarts
        #
        # `PeerRemovedFromRoutingTable` now only happens when a peer reported as `BadNode`.
        # Otherwise kad will remove a `dropped out node` directly from RT.
        # So, the detection of the removal explicity will now have much less chance,
        # due to the removal of connection_issue tracking.
        #
        # With the further reduction of replication frequency,
        # it now becomes harder to detect a `dropped out node` as a `failed to replicate` node.
        # Hence now remove the assertion check and replace with a print out only.
        run: |
          node_count=$(ls "${{ matrix.node_data_path }}" | wc -l)
          echo "Node dir count is $node_count"
          restart_count=$(rg "Node is restarting in" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "Restart $restart_count nodes"
          if ! rg "PeerRemovedFromRoutingTable" "${{ matrix.node_data_path }}" -c --stats
          then
            echo "No peer removal count found"
            exit 0
          fi
          peer_removed=$(rg "PeerRemovedFromRoutingTable" "${{ matrix.node_data_path }}" -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o)
          echo "PeerRemovedFromRoutingTable $peer_removed times"

      # Only error out after uploading the logs
      - name: Don't log raw data
        if: matrix.os != 'windows-latest' # causes error
        shell: bash
        timeout-minutes: 10
        run: |
          if ! rg '^' "${{ matrix.ant_path }}"/*/*/logs | awk 'length($0) > 15000 { print; exit 1 }'
          then
            echo "We are logging an extremely large data"
            exit 1
          fi

  large_file_upload_test:
    name: Large file upload
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: install ripgrep
        shell: bash
        run: sudo apt-get install -y ripgrep

      - name: Check the available space
        run: |
          df
          echo "Home dir:"
          du -sh /home/runner/
          echo "Home subdirs:"
          du -sh /home/runner/*/
          echo "PWD:"
          du -sh .
          echo "PWD subdirs:"
          du -sh */

      - name: Download material (135MB)
        shell: bash
        run: |
          mkdir test_data_1
          cd test_data_1
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/Qi930/safe-qiWithListeners-x86_64.tar.gz
          wget https://sn-node.s3.eu-west-2.amazonaws.com/joshuef/Qi930/safenode-qiWithListeners-x86_64.tar.gz
          ls -l
          cd ..
          tar -cvzf test_data_1.tar.gz test_data_1
          ls -l

      - name: Build binaries
        run: cargo build --release --bin antnode --bin ant --bin antctl
        timeout-minutes: 30

      - name: Install antctl on Windows
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $destination = "C:\\Users\\runneradmin\\AppData\\Local\\Microsoft\\WindowsApps"
          Copy-Item "target\\release\\antctl.exe" -Destination $destination -Force
          Write-Host "antctl installed to $destination"

      - name: Start a local network
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: start
          enable-evm-testnet: true
          node-path: target/release/antnode
          build: true

      - name: Check if ANT_PEERS and EVM_NETWORK are set
        shell: bash
        run: |
          if [[ -z "$ANT_PEERS" ]]; then
            echo "The ANT_PEERS variable has not been set"
            exit 1
          elif [[ -z "$EVM_NETWORK" ]]; then
            echo "The EVM_NETWORK variable has not been set"
            exit 1
          else
            echo "ANT_PEERS has been set to $ANT_PEERS"
            echo "EVM_NETWORK has been set to $EVM_NETWORK"
          fi

      - name: Check the available space post download
        run: |
          df
          echo "Home dir:"
          du -sh /home/runner/
          echo "Home subdirs:"
          du -sh /home/runner/*/
          echo "PWD:"
          du -sh .
          echo "PWD subdirs:"
          du -sh */

      - name: export default secret key
        run: echo "SECRET_KEY=0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80" >> $GITHUB_ENV
        shell: bash

      - name: File upload
        run: ./target/release/ant --log-output-dest data-dir --local file upload "./test_data_1.tar.gz" > ./upload_output 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 15

      - name: showing the upload terminal output
        run: cat upload_output
        shell: bash
        if: always()

      - name: parse address
        run: |
          UPLOAD_ADDRESS=$(rg "At address: ([0-9a-f]*)" -o -r '$1' ./upload_output)
          echo "Parsed address is $UPLOAD_ADDRESS"
          echo "UPLOAD_ADDRESS=$UPLOAD_ADDRESS" >> $GITHUB_ENV
        shell: bash

      - name: File Download Error Check
        run: ./target/release/ant --log-output-dest data-dir --local file download ${{ env.UPLOAD_ADDRESS }} . > ./error_output 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 5
        continue-on-error: true

      - name: Verify expected error message
        run: |
          cat ./error_output
          if ! grep -q "cannot be used for streaming disk flushing" ./error_output; then
            echo "Expected error message 'cannot be used for streaming disk flushing' not found in output"
            exit 1
          fi
          echo "Expected error message found in output"
        shell: bash

      - name: File Download
        run: ./target/release/ant --log-output-dest data-dir --local file download ${{ env.UPLOAD_ADDRESS }} ./downloaded_resources/downloaded_file > ./download_output 2>&1
        env:
          ANT_LOG: "v"
        timeout-minutes: 5

      - name: showing the download terminal output
        run: |
          cat download_output
          ls -l
          cd downloaded_resources
          ls -l
        shell: bash
        if: always()

      - name: Verify chunk cache is empty after download
        run: |
          # Define the default chunk cache directory path for the runner
          CACHE_DIR="$HOME/.local/share/autonomi/client/chunk_cache"
          echo "Checking chunk cache directory: $CACHE_DIR"
          echo "Note: Download was run with --disable-cache, so no chunks should be cached"
          
          if [ -d "$CACHE_DIR" ]; then
            echo "Cache directory exists, checking contents..."
            CACHE_FILES=$(find "$CACHE_DIR" -name "*.chunk" -type f 2>/dev/null | wc -l)
            echo "Found $CACHE_FILES cached chunk files"
            
            if [ "$CACHE_FILES" -eq 0 ]; then
              echo "✅ SUCCESS: Chunk cache is empty as expected (--disable-cache was used)"
            else
              echo "❌ FAILURE: Found $CACHE_FILES cached chunks despite using --disable-cache"
              echo "Cache directory contents:"
              ls -la "$CACHE_DIR"
              exit 1
            fi
          else
            echo "✅ SUCCESS: Chunk cache directory does not exist (expected with --disable-cache)"
          fi
        shell: bash
        if: always()

      - name: Confirming connection errors
        shell: bash
        timeout-minutes: 1
        env:
          NODE_DATA_PATH: /home/runner/.local/share/autonomi/node
        run: |
          incoming_connection_errors=$(rg "IncomingConnectionError" $NODE_DATA_PATH -c --stats | \
            rg "(\d+) matches" | rg "\d+" -o) || { echo "Failed to find IncomingConnectionError error"; exit 0; }
          if [ -z "$incoming_connection_errors" ]; then
            echo "Doesn't find any IncomingConnectionError error !"
          else
            echo "Found $incoming_connection_errors IncomingConnectionError errors."
          fi
          if ! rg "UnexpectedEof" $NODE_DATA_PATH -c --stats; then
            echo "Doesn't find any UnexpectedEof error !"
          else
            echo "Found errors."
            exit 1
          fi

      - name: Stop the local network and upload logs
        if: always()
        uses: maidsafe/ant-local-testnet-action@main
        with:
          action: stop
          log_file_prefix: ant_test_logs_large_file_upload_no_ws
          build: true
