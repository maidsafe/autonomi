name: Benchmark Chart Generation

# Do not run this workflow on pull request since this workflow has permission to modify contents.
on:
  push:
    branches:
      - main

permissions:
  # deployments permission to deploy GitHub pages website
  deployments: write
  # contents permission to update benchmark contents in gh-pages branch
  contents: write

env:
  CARGO_INCREMENTAL: '0'
  RUST_BACKTRACE: 1

jobs:
  benchmark:
    if: "!startsWith(github.event.head_commit.message, 'chore(release):')"
    name: Run and log benchmark criterion results on gh-pages
    # right now only ubuntu, running on multiple systems would require many pushes...\
    # perhaps this can be done with one consolidation action in the future, pulling down all results and pushing
    # once to the branch..
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y heaptrack
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - run: cargo install cargo-criterion

      - name: ubuntu install ripgrep
        run: sudo apt-get -y install ripgrep

     
      - name: Build sn bins
        run: cargo build --release --bins
        timeout-minutes: 30

      - name: Start a local network
        run: cargo run --release --bin testnet --features verify-nodes -- --interval 2000 --node-path ./target/release/safenode
        env:
          SN_LOG: "all"
        timeout-minutes: 10

      - name: Set contact env var node.
        shell: bash
        # get all nodes listen ports
        run: echo "SAFE_PEERS=$(rg "listening on \".+\"" ~/.safe -u | rg '/ip4.*$' -m1 -o | rg '"' -r '')" >> "$GITHUB_ENV"

      - name: Check contact peer
        shell: bash
        run: echo "Peer is $SAFE_PEERS"

      # Start a heaptracked node instance to compare memory usage
      - name: Start safenode with heaptrack
        run: |
          mkdir -p ~/.safe/heapnode
          heaptrack ./target/release/safenode --root-dir ~/.safe/heapnode --log-dir ~/.safe/heapnode &
          sleep 10
        env:
          SN_LOG: "all"

      ########################
      ### Benchmark itself ###
      ########################

      - name: Bench `safe`
        shell: bash
        # Criterion outputs the actual bench results to stderr "2>&1 tee output.txt" takes stderr,
        # passes to tee which displays it in the terminal and writes to output.txt
        run: | 
          cargo criterion --message-format=json 2>&1 | tee -a output.txt
          cat output.txt | rg benchmark-complete | jq -s 'map({
            name: (.id | split("/"))[-1],
            unit: "MiB/s",
            value: ((if .throughput[0].unit == "KiB/s" then (.throughput[0].per_iteration / (1024*1024*1024)) else (.throughput[0].per_iteration / (1024*1024)) end) / (.mean.estimate / 1e9))
          })' > files-benchmark.json

      - name: Remove git hooks so gh-pages git commits will work
        shell: bash
        run: rm -rf .git/hooks/pre-commit

      - name: check files-benchmark.json
        shell: bash
        run: cat files-benchmark.json
        
      # gh-pages branch is updated and pushed automatically with extracted benchmark data
      - name: Store cli files benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: "`safe files` benchmarks"
          tool: 'customBiggerIsBetter'
          output-file-path: files-benchmark.json
          # Access token to deploy GitHub Pages branch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Push and deploy GitHub pages branch automatically
          auto-push: true
          max-items-in-chart: 300

      # Start a heaptracked client instance to compare memory usage
      # The generated large single file (around 450MB) may vary little bit along the releases
      - name: Start client with heaptrack
        shell: bash
        run: |
          tar -czvf release_zip.tar.gz ./target/release
          heaptrack ./target/release/safe --files upload -- "./release_zip.tar.gz"
        env:
          SN_LOG: "all"

      ### CLEANUP ###
      - name: Kill all nodes
        shell: bash
        timeout-minutes: 1
        if: always()
        continue-on-error: true
        run: |
          pkill safenode
          echo "$(pgrep safenode | wc -l) nodes still running"

      - name: Tar log files
        shell: bash
        continue-on-error: true
        run: |
          find ~/.safe/heapnode -iname '*.log*' | tar -zcvf heap_node_log_files.tar.gz --files-from -
          find ~/.safe/node/local-test-network -iname '*.log*' | tar -zcvf nodes_log_files.tar.gz --files-from -
          find /tmp/safe-client -iname '*.log*' | tar -zcvf client_log_files.tar.gz --files-from -
          find . -iname '*log_files.tar.gz' | tar -zcvf log_files.tar.gz --files-from -
        if: always()

      - name: Upload Logs
        uses: actions/upload-artifact@main
        with:
          name: sn_logs_benchmark_chart_generation
          path: log_files.tar.gz
        if: always()
        continue-on-error: true

      
      #########################
      ### Node Mem Analysis ###
      #########################
      - name: Check for Node heaptrack file
        shell: bash
        run: ls -la

      - name: Analyze node memory usage
        shell: bash
        run: |
          HEAPTRACK_FILE=$(ls -t heaptrack.safenode.*.zst | head -1)
          heaptrack --analyze $HEAPTRACK_FILE > heaptrack.safenode.txt

      - name: Upload Node Heaptrack
        uses: actions/upload-artifact@main
        with:
          name: heaptrack_safenode
          path: heaptrack.safenode.*
        continue-on-error: true

      - name: Check node memory usage
        id: node-memory-usage-check
        shell: bash
        env:
          NODE_MEM_LIMIT_MB: "100" # mb
        run: |
          MEMORY_USAGE=$(rg "peak heap memory consumption" ./heaptrack.safenode.txt | awk '{print $5}' | rg "M" -r "")
          echo "Memory usage: $MEMORY_USAGE MB"
          if (( $(echo "$MEMORY_USAGE > $NODE_MEM_LIMIT_MB" | bc -l) )); then
            echo "Node memory usage exceeded threshold: $MEMORY_USAGE MB"
            exit 1
          fi
          # Write the node memory usage to a JSON file
          echo '[
              {
                  "name": Peak memory w/ `safe` benchmarks",
                  "value": '$MEMORY_USAGE',
                  "unit": "MB"
              }
          ]' > node_memory_usage.json

      - name: check node_memory_usage.json
        shell: bash
        run: cat node_memory_usage.json

      - name: Upload Node Memory Usage
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: 'Node memory'
          tool: 'customSmallerIsBetter'
          output-file-path: node_memory_usage.json
          # Access token to deploy GitHub Pages branch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Push and deploy GitHub pages branch automatically
          auto-push: true
          max-items-in-chart: 300

      ###########################
      ### Client Mem Analysis ###
      ###########################
      - name: Check for Client heaptrack file
        shell: bash
        run: ls -la

      - name: Analyze client memory usage
        shell: bash
        run: |
          HEAPTRACK_FILE=$(ls -t heaptrack.safe.*.zst | head -1)
          heaptrack --analyze $HEAPTRACK_FILE > heaptrack.safe.txt

      - name: Upload Client Heaptrack
        uses: actions/upload-artifact@main
        with:
          name: heaptrack_safe
          path: heaptrack.safe.*
        continue-on-error: true

      - run: cat ./heaptrack.safe.txt 
        shell: bash

      - run: rg "peak heap memory consumption" ./heaptrack.safe.txt | awk '{print $5}' | rg "M" -r ""
        shell: bash

      - name: Check client memory usage
        id: client-memory-usage-check
        shell: bash
        # remove once this is not bugging out
        continue-on-error: true
        env:
          CLIENT_PEAK_MEM_LIMIT_MB: "1024" # ~1GB (unit is megabytes)
          CLIENT_AVG_MEM_LIMIT_MB: "600" # mb
        run: |
          peak_mem_usage=$(rg "peak heap memory consumption" ./heaptrack.safe.txt | awk '{print $5}' | rg "M" -r "")
          echo "Peak memory usage: $peak_mem_usage MB"
          if (( $(echo "$peak_mem_usage > $CLIENT_PEAK_MEM_LIMIT_MB" | bc -l) )); then
            echo "Client peak memory usage exceeded threshold: $CLIENT_PEAK_MEM_LIMIT_MB MB"
            exit 1
          fi
          mem_reads=($(rg "\"memory_used_mb\":\d+" /tmp/safe-client/safenode.* -o --no-line-number --no-filename | rg "\d+" -o))
          total_mem=$(ls heaptrack.safe.txt | wc -l)
          echo "Total memory initial value is: $total_mem"
          for mem in "${mem_reads[@]}"; do
            total_mem=$((total_mem+$(($mem))))
          done
          num_of_times=$(rg "\"memory_used_mb\"" /tmp/safe-client/safenode.* -c --stats | rg "(\d+) matches" | rg "\d+" -o)
          echo "num_of_times: $num_of_times"
          echo "Total memory is: $total_mem"
          average_mem=$(($total_mem/$(($num_of_times))))
          echo "Average memory is: $average_mem"
          if (( $(echo "$average_mem > $CLIENT_AVG_MEM_LIMIT_MB" | bc -l) )); then
            echo "Client average memory usage exceeded threshold: $CLIENT_AVG_MEM_LIMIT_MB MB"
            exit 1
          fi
          # Write the client memory usage to a file
          echo '[
              {
                  "name": "Peak memory usage w/ ~450mb upload",
                  "value": '$peak_mem_usage',
                  "unit": "MB"
              },
              {
                  "name": "Average memory usage w/ ~450mb upload",
                  "value": '$average_mem',
                  "unit": "MB"
              }
          ]' > client_memory_usage.json

      - name: check client_memory_usage.json
        shell: bash
        run: cat client_memory_usage.json

      - name: Upload Client Memory Usage
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: 'Client memory'
          tool: 'customSmallerIsBetter'
          output-file-path: client_memory_usage.json
          # Access token to deploy GitHub Pages branch
          github-token: ${{ secrets.GITHUB_TOKEN }}
          # Push and deploy GitHub pages branch automatically
          auto-push: true
          max-items-in-chart: 300
