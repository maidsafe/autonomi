name: Publish Python Node Package

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  macos:
    runs-on: macos-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x86_64, aarch64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: 'true'
          working-directory: ./ant-node
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./ant-node/dist/*.whl
          if-no-files-found: error

  windows:
    runs-on: windows-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        target: [x64]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        with:
          args: --release --out dist
          sccache: 'true'
          working-directory: ./ant-node
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-windows-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./ant-node/dist/*.whl
          if-no-files-found: error

  linux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        target: [x86_64]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        with:
          target: ${{ matrix.target }}
          manylinux: auto
          before-script-linux: |
            rustup default stable
            rustup component add rustfmt
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: false
          working-directory: ./ant-node
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./ant-node/dist/*.whl
          if-no-files-found: error

  musllinux:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-musl
          - armv7-unknown-linux-musleabihf
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Build wheels
        uses: PyO3/maturin-action@v1
        env:
          PYO3_CROSS_PYTHON_VERSION: ${{ matrix.python-version }}
          PYO3_CROSS: "1"
        with:
          target: ${{ matrix.target }}
          manylinux: musllinux_1_2
          args: --release --out dist -i python${{ matrix.python-version }}
          sccache: false
          working-directory: ./ant-node
      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-musllinux-${{ matrix.target }}-py${{ matrix.python-version }}
          path: ./ant-node/dist/*.whl
          if-no-files-found: error

  sdist:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
      - name: Create Python module structure
        run: |
          mkdir -p ant-node/python/antnode
          cat > ant-node/python/antnode/__init__.py << EOL
          from ._antnode import *
          __version__ = "${{ github.ref_name }}"
          EOL
      - name: Build sdist
        uses: PyO3/maturin-action@v1
        with:
          command: sdist
          args: --out dist
          working-directory: ./ant-node
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: ant-node/dist/*.tar.gz
          if-no-files-found: error
          retention-days: 1
          compression-level: 9
        continue-on-error: true
        timeout-minutes: 10
        env:
          ACTIONS_STEP_DEBUG: true
          ACTIONS_RUNNER_DEBUG: true

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [macos, windows, linux, musllinux, sdist]
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Create dist directory
        run: mkdir -p dist

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Prepare dist directory
        run: |
          find dist -type f -name "*.whl" -exec mv {} dist/ \;
          find dist -type f -name "*.tar.gz" -exec mv {} dist/ \;
          rm -rf dist/*/
          echo "Final dist directory contents:"
          ls -la dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          verbose: true
          print-hash: true
